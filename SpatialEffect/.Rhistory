# So, to compute these tau_ix values, go through each row in curZ
# and take differences in means for tau_ix values corresponding to
# columns in curZ with 1 minus columns with 0.
for(i in 1:nrow(curZ)){
Ydata[,paste("tau",i,sep="")] <- apply(Ydata[,grep("Ypo", names(Ydata))][,curZ[i,]==1],
1, mean)-apply(Ydata[,grep("Ypo", names(Ydata))][,curZ[i,]==0],
1, mean)
}
# Now start computing the distance-specific aggregates.
# Function to estimate E[Vx|d_ix = d]:
# Get d-specific raster cell means around each node
# (requires "raster" package)
# Gives you the option of marginalizing over only
# unique cells versus over evaluation points.
unitCircle <- function(numpts_in){
ptE <- sin((1:numpts_in/numpts_in)*2*pi)
ptN <- cos(((1:numpts_in)/numpts_in)*2*pi)
circPoints <- cbind(ptE, ptN)
return(circPoints)
}
dMeans <- function(	Zdata_in = NULL,
ras_in = NULL,
Ydata_in = NULL,
Yvar="Y",
Outstub=Yvar,
gridRes_in=res(ras_in)[1],
dist_vec=(gridRes_in:10*gridRes_in),
evalpts_in=10,
only.unique=FALSE){
for(distUp in dist_vec){
numpts <- ceiling(ceiling(distUp/(gridRes_in/sqrt(2))+1)*pi)*evalpts_in
circPoints <- unitCircle(numpts)
for(i in 1:nrow(Zdata_in)){
ZxTemp <- Zdata_in[i,"x"] + circPoints[,1]*distUp
ZyTemp <- Zdata_in[i,"y"] + circPoints[,2]*distUp
if(only.unique==TRUE){
Zdata_in[i,paste(Outstub, "bar", distUp, sep="")] <- mean(Ydata_in[unique(na.omit(cellFromXY(ras_in,
cbind(ZxTemp, ZyTemp)))),Yvar])
}
if(only.unique==FALSE){
Zdata_in[i,paste(Outstub, "bar", distUp, sep="")] <- mean(Ydata_in[na.omit(cellFromXY(ras_in,
cbind(ZxTemp, ZyTemp))),Yvar])
}
}
}
return(Zdata_in)
}
# Now get the d-specific tau values for each of the intervention nodes
# This is just to create the dummy cells in the Z data:
Zdata_out <- dMeans(	Zdata_in=Zdata,
ras_in=ras0,
Ydata_in=Ydata,
Yvar="tau1",
Outstub="tau",
gridRes_in=res(ras0)[1],
dist_vec=dist_vec_up,
evalpts_in=10,
only.unique=FALSE)
# Now go intervention node by node:
for(i in 1:nrow(Zdata_out)){
Zdata_out[i,] <- dMeans(	Zdata_in=Zdata_out[i,],
ras_in=ras0,
Ydata_in=Ydata,
Yvar=paste("tau",i,sep=""),
Outstub="tau",
gridRes_in=res(ras0)[1],
dist_vec=dist_vec_up,
evalpts_in=10,
only.unique=FALSE)
}
# Now we can get the true MIRs:
MIRvec <- apply(Zdata_out[,grep("taubar", names(Zdata_out))], 2, mean)
par(mfrow=c(1,1))
plot(dist_vec_up, MIRvec, type="l",
ylab="True MIR",
xlab="distance from intervention node")
# Trial run before going through all of curZ
assignUp <- 1
Zdata$Z <- curZ[,assignUp]
Ydata_use <- Ydata[,c("Yindex", "x","y")]
Ydata_use$Y <- Ydata[,paste("Ypo", assignUp, sep="")]
ras_use <- setValues(ras0, Ydata[,paste("Ypo",assignUp,sep="")])
for(assignUp in 1:ncol(curZ)){
Zdata$Z <- curZ[,assignUp]
Ydata_use <- Ydata[,c("Yindex", "x","y")]
Ydata_use$Y <- Ydata[,paste("Ypo", assignUp, sep="")]
ras_use <- setValues(ras0, Ydata[,paste("Ypo",assignUp,sep="")])
MIRest_out <- SpatialEffect(ras = ras_use,
Zdata = Zdata,
x_coord_Z = "x",
y_coord_Z = "y",
treatment = "Z",
dVec = dist_vec_up,
cutoff = (Yscale/5),
per.se = 0,
conley.se = 0)
tauHat <- MIRest_out$MIRhat.mat$taudhat
if(assignUp==1){
tauHat.mat <- tauHat
}
if(assignUp>1){
tauHat.mat <- rbind(tauHat.mat, tauHat)
}
}
# Plot results:
plot(dist_vec_up, MIRvec,
ylim=range(tauHat.mat),
ylab="MIR estimates",
xlab="distance from intervention node",
type="n")
for(i in 1:nrow(tauHat.mat)){
points(dist_vec_up, tauHat.mat[i,], type="l", col=gray(0, alpha=.1))
}
points(dist_vec_up, MIRvec, type="l", col="red")
load("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/replication/Acemoglu_etal_2018/Acemoglu_etal_2018_fect.RData")
rm(list=ls())
load("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/replication/Acemoglu_etal_2018/Acemoglu_etal_2018_fect.RData")
var(Y.dat)
var(out_fect$Y.dat)
var(as.vector(out_fect$Y.dat))
var(as.vector(out_fect$Y.dat[out_fect$D.dat == 0]))
dim(out_fect$Y.dat[out_fect$D.dat == 0])
var(as.vector(out_fect$Y.dat)[out_fect$D.dat == 0])
var(as.vector(out_fect$Y.dat)[as.vector(out_fect$D.dat) == 0])
out_fect$Y.ct
var(as.vector(out_fect$Y.ct))
var(as.vector(out_fect$Y.ct), na.rm = TRUE)
dim(out_fect$Y.dat)
dim(out_fect$Yct)
dim(out_fect$Y.ct)
load("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/replication/Acemoglu_etal_2018/Acemoglu_etal_2018_ife.RData")
dim(out_ife$Y.ct)
var(as.vector(out_ife$Y.ct), na.rm = TRUE)
var(as.vector(out_ife$Y.dat)[as.vector(out_ife$D.dat) == 0])
View(out_fect$Y.ct)
predict(out_fect)
View(out_fect$Y.ct)
View(out_fect$Y.dat)
var(as.vector(out_fect$Y.dat - out_fect$Y.ct), na.rm = 1)
View(as.vector(out_ife$Y.dat)[as.vector(out_ife$D.dat) == 0])
vvv <- as.vector(out_ife$Y.dat)[as.vector(out_ife$D.dat) == 0]
sum((vvv - mean(vvv))^2)
mean(vvv)
sum((vvv - mean(vvv))^2) / length(vvv)
var(vvv)
ccc <- as.vector(out_fect$Y.ct)
ccc <- ccc[!is.na(ccc)]
ccc <- as.vector(out_fect$Y.ct)[as.vector(out_ife$D.dat) == 0]
ccc <- ccc[!is.na(ccc)]
ccc <- as.vector(out_fect$Y.ct)[as.vector(out_ife$D.dat) == 0]
vvv <- vvv[!is.na(ccc)]
ccc <- ccc[!is.na(ccc)]
var(ccc)
var(vvv)
(var(vvv) - var(ccc)) / var(vvv)
vvv <- as.vector(out_fect$Y.dat)[as.vector(out_fect$D.dat) == 0]
ccc <- as.vector(out_fect$Y.ct)[as.vector(out_fect$D.dat) == 0]
vvv <- vvv[!is.na(ccc)]
ccc <- ccc[!is.na(ccc)]
(var(vvv) - var(ccc)) / var(vvv)
vvv <- as.vector(out_fect$Y.dat)[as.vector(out_fect$D.dat) == 0]
vvv <- as.vector(out_ife$Y.dat)[as.vector(out_ife$D.dat) == 0]
ccc <- as.vector(out_ife$Y.ct)[as.vector(out_ife$D.dat) == 0]
vvv <- vvv[!is.na(ccc)]
ccc <- ccc[!is.na(ccc)]
(var(vvv) - var(ccc)) / var(vvv)
load("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/replication/Tomz_etal_2007/Tomz_etal_2007_fect.RData")
vvv <- as.vector(out_fect$Y.dat)[as.vector(out_fect$D.dat) == 0]
ccc <- as.vector(out_fect$Y.ct)[as.vector(out_fect$D.dat) == 0]
vvv <- vvv[!is.na(ccc)]
ccc <- ccc[!is.na(ccc)]
(var(vvv) - var(ccc)) / var(vvv)
load("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/replication/Tomz_etal_2007/Tomz_etal_2007_ife.RData")
vvv <- as.vector(out_ife$Y.dat)[as.vector(out_ife$D.dat) == 0]
ccc <- as.vector(out_ife$Y.ct)[as.vector(out_ife$D.dat) == 0]
vvv <- vvv[!is.na(ccc)]
ccc <- ccc[!is.na(ccc)]
(var(vvv) - var(ccc)) / var(vvv)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/package/ModerationTest/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/package/ModerationTest/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
sourceCpp("/Users/yewang/Documents/GitHub/evTree_causal/script/evtree_5.0/src/evTree_causal.cpp")
rm(list=ls())
library(fect)
## library(foreach)
## library(ggplot2)
## library(grid)
## library(gridExtra)
library(fastplm)
## library(wfe)
#source("/Users/llc/Desktop/fect_sim/gsc_sim.R")
source("~/Dropbox/CurrentProjects/TSCS_sensitivity/code/licheng/power_wild/gsc_sim.R")
source("~/Dropbox/CurrentProjects/TSCS_sensitivity/code/ye/equi_test.R")
## just show graphs
T0 <- 20
T <- 30
type <- "w" # w for standard normal
att <- NULL
N <- 100
tr_prob <- 1/2
tr.sd <- 1
tr.mean <- 0.5
Ntr <- round(N*tr_prob)
Nco <- N - Ntr
DID <- 0
beta <- c(1, 3)
force <- 3
r <- 2
p <- 0
mu <- 5
f_size_seq <- seq(from = 0.1, to = 1, by = 0.1)
sim.y.tr.sd <- sim.y.sd <- sim.res.tr.sd <- sim.res.sd <- matrix(NA, 100, 11)
sim.est.att.ci <- array(NA, dim = c(20, 2, 100, 11))
sim.att.avg <- matrix(NA, 100, 11)
sim.y.period.sd <- array(NA, dim = c(20, 100, 11))
sim.Ftest <- matrix(NA, 100, 11)
sim.y.tr.sd.ife <- sim.y.sd.ife <- sim.res.tr.sd.ife <- sim.res.sd.ife <- sim.thres <- matrix(NA, 100, 11)
sim.est.att.ci.ife <- array(NA, dim = c(20, 2, 100, 11))
sim.att.avg.ife <- matrix(NA, 100, 11)
sim.y.period.sd.ife <- array(NA, dim = c(20, 100, 11))
for (j in 1:11){
r <- f_size <- 0
if (j > 1) {
r <- 1
f_size <- f_size_seq[j-1]
}
data <- simulate(N = (Ntr + Nco), T = T, r = r, p = 0, Ntr = Ntr,
tr.mean = 0, tr.sd = 1, T0 = T0, th=0, att = 5,
beta = c(1, 3), f_size = f_size,
type = type, force = 3, mu = 5)
out_fect <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 0, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
fitness_fect <- fect(Y~D, data = data, method = "fe",
index=c("id", "time"), tol = 1e-4, se = 1,
nboots = 500, r = 0,
CV = 0, force = "two-way", parallel = 1, cores = 4,
fitTest = 1, na.rm = 1)
out_ife <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 1, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
## store results relevant to euqivalence
## bootstrapped att ci
sim.est.att.ci[,,i,j] <- out_fect$est.att.on[1:20,3:4]
sim.est.att.ci.ife[,,i,j] <- out_ife$est.att.on[1:20,3:4]
## residual sd
Y <- out_fect$Y.dat
D <- out_fect$D.dat
I <- out_fect$I.dat
eff <- out_fect$eff
Y.ife <- out_ife$Y.dat
D.ife <- out_ife$D.dat
I.ife <- out_ife$I.dat
eff.ife <- out_ife$eff
## first 50 are treated units
res.pre <- eff * (1 - D) * I
res.pre[res.pre == 0] <- NA
res.sd.periods <- apply(res.pre, 1, sd, na.rm = TRUE)
Y.pre <- Y * (1 - D) * I
Y.pre[Y.pre == 0] <- NA
Y.sd.periods <- apply(Y.pre, 1, sd, na.rm = TRUE)
res.sd <- sd(eff[which(D == 0 & I == 1)])
res.tr.sd <- sd(eff[1:20, 1:50])
y.sd <- sd(Y[which(D == 0 & I == 1)])
y.tr.sd <- sd(Y[1:20, 1:50])
res.pre.ife <- eff.ife * (1 - D.ife) * I.ife
res.pre.ife[res.pre.ife == 0] <- NA
res.sd.periods.ife <- apply(res.pre.ife, 1, sd, na.rm = TRUE)
res.sd.ife <- sd(eff.ife[which(D.ife == 0 & I.ife == 1)])
res.tr.sd.ife <- sd(eff.ife[1:20, 1:50])
y.sd.ife <- sd(Y.ife[which(D.ife == 0 & I.ife == 1)])
y.tr.sd.ife <- sd(Y.ife[1:20, 1:50])
## by period y
y.period.sd <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
y.period.sd.ife <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
sim.y.tr.sd[i, j] <- y.tr.sd
sim.y.sd[i, j] <- y.sd
sim.res.tr.sd[i, j] <- res.tr.sd
sim.res.sd[i, j] <- res.sd
sim.y.period.sd[,i,j] <- c(y.period.sd)
sim.y.tr.sd.ife[i, j] <- y.tr.sd.ife
sim.y.sd.ife[i, j] <- y.sd.ife
sim.res.tr.sd.ife[i, j] <- res.tr.sd.ife
sim.res.sd.ife[i, j] <- res.sd.ife
sim.y.period.sd.ife[,i,j] <- c(y.period.sd.ife)
sim.thres[i, j] <- quantile(res.sd.periods, 0.5)
## estimated att
sim.att.avg[i, j] <- out_fect$att.avg
sim.att.avg.ife[i, j] <- out_ife$att.avg
## store results relevant to F test
#sim.Ftest[i, j] <- fitness_fect$Ftest[4]
}
for (j in 1:11){
r <- f_size <- 0
if (j > 1) {
r <- 1
f_size <- f_size_seq[j-1]
}
data <- simulate(N = (Ntr + Nco), T = T, r = r, p = 0, Ntr = Ntr,
tr.mean = 0, tr.sd = 1, T0 = T0, th=0, att = 5,
beta = c(1, 3), f_size = f_size,
type = type, force = 3, mu = 5)
out_fect <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 0, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
# fitness_fect <- fect(Y~D, data = data, method = "fe",
#                      index=c("id", "time"), tol = 1e-4, se = 1,
#                      nboots = 500, r = 0,
#                      CV = 0, force = "two-way", parallel = 1, cores = 4,
#                      fitTest = 1, na.rm = 1)
out_ife <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 1, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
## store results relevant to euqivalence
## bootstrapped att ci
sim.est.att.ci[,,i,j] <- out_fect$est.att.on[1:20,3:4]
sim.est.att.ci.ife[,,i,j] <- out_ife$est.att.on[1:20,3:4]
## residual sd
Y <- out_fect$Y.dat
D <- out_fect$D.dat
I <- out_fect$I.dat
eff <- out_fect$eff
Y.ife <- out_ife$Y.dat
D.ife <- out_ife$D.dat
I.ife <- out_ife$I.dat
eff.ife <- out_ife$eff
## first 50 are treated units
res.pre <- eff * (1 - D) * I
res.pre[res.pre == 0] <- NA
res.sd.periods <- apply(res.pre, 1, sd, na.rm = TRUE)
Y.pre <- Y * (1 - D) * I
Y.pre[Y.pre == 0] <- NA
Y.sd.periods <- apply(Y.pre, 1, sd, na.rm = TRUE)
res.sd <- sd(eff[which(D == 0 & I == 1)])
res.tr.sd <- sd(eff[1:20, 1:50])
y.sd <- sd(Y[which(D == 0 & I == 1)])
y.tr.sd <- sd(Y[1:20, 1:50])
res.pre.ife <- eff.ife * (1 - D.ife) * I.ife
res.pre.ife[res.pre.ife == 0] <- NA
res.sd.periods.ife <- apply(res.pre.ife, 1, sd, na.rm = TRUE)
res.sd.ife <- sd(eff.ife[which(D.ife == 0 & I.ife == 1)])
res.tr.sd.ife <- sd(eff.ife[1:20, 1:50])
y.sd.ife <- sd(Y.ife[which(D.ife == 0 & I.ife == 1)])
y.tr.sd.ife <- sd(Y.ife[1:20, 1:50])
## by period y
y.period.sd <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
y.period.sd.ife <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
sim.y.tr.sd[i, j] <- y.tr.sd
sim.y.sd[i, j] <- y.sd
sim.res.tr.sd[i, j] <- res.tr.sd
sim.res.sd[i, j] <- res.sd
sim.y.period.sd[,i,j] <- c(y.period.sd)
sim.y.tr.sd.ife[i, j] <- y.tr.sd.ife
sim.y.sd.ife[i, j] <- y.sd.ife
sim.res.tr.sd.ife[i, j] <- res.tr.sd.ife
sim.res.sd.ife[i, j] <- res.sd.ife
sim.y.period.sd.ife[,i,j] <- c(y.period.sd.ife)
sim.thres[i, j] <- quantile(res.sd.periods, 0.5)
## estimated att
sim.att.avg[i, j] <- out_fect$att.avg
sim.att.avg.ife[i, j] <- out_ife$att.avg
## store results relevant to F test
#sim.Ftest[i, j] <- fitness_fect$Ftest[4]
}
i = 1
for (j in 1:11){
r <- f_size <- 0
if (j > 1) {
r <- 1
f_size <- f_size_seq[j-1]
}
data <- simulate(N = (Ntr + Nco), T = T, r = r, p = 0, Ntr = Ntr,
tr.mean = 0, tr.sd = 1, T0 = T0, th=0, att = 5,
beta = c(1, 3), f_size = f_size,
type = type, force = 3, mu = 5)
out_fect <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 0, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
# fitness_fect <- fect(Y~D, data = data, method = "fe",
#                      index=c("id", "time"), tol = 1e-4, se = 1,
#                      nboots = 500, r = 0,
#                      CV = 0, force = "two-way", parallel = 1, cores = 4,
#                      fitTest = 1, na.rm = 1)
out_ife <- fect(Y~D, data = data, index = c("id", "time"),
fitTest = 0, method = "fe",
force = 3, r = 1, CV = 0, parallel = 1,
tol = 1e-4, se = 1, nboots = 500)
## store results relevant to euqivalence
## bootstrapped att ci
sim.est.att.ci[,,i,j] <- out_fect$est.att.on[1:20,3:4]
sim.est.att.ci.ife[,,i,j] <- out_ife$est.att.on[1:20,3:4]
## residual sd
Y <- out_fect$Y.dat
D <- out_fect$D.dat
I <- out_fect$I.dat
eff <- out_fect$eff
Y.ife <- out_ife$Y.dat
D.ife <- out_ife$D.dat
I.ife <- out_ife$I.dat
eff.ife <- out_ife$eff
## first 50 are treated units
res.pre <- eff * (1 - D) * I
res.pre[res.pre == 0] <- NA
res.sd.periods <- apply(res.pre, 1, sd, na.rm = TRUE)
Y.pre <- Y * (1 - D) * I
Y.pre[Y.pre == 0] <- NA
Y.sd.periods <- apply(Y.pre, 1, sd, na.rm = TRUE)
res.sd <- sd(eff[which(D == 0 & I == 1)])
res.tr.sd <- sd(eff[1:20, 1:50])
y.sd <- sd(Y[which(D == 0 & I == 1)])
y.tr.sd <- sd(Y[1:20, 1:50])
res.pre.ife <- eff.ife * (1 - D.ife) * I.ife
res.pre.ife[res.pre.ife == 0] <- NA
res.sd.periods.ife <- apply(res.pre.ife, 1, sd, na.rm = TRUE)
res.sd.ife <- sd(eff.ife[which(D.ife == 0 & I.ife == 1)])
res.tr.sd.ife <- sd(eff.ife[1:20, 1:50])
y.sd.ife <- sd(Y.ife[which(D.ife == 0 & I.ife == 1)])
y.tr.sd.ife <- sd(Y.ife[1:20, 1:50])
## by period y
y.period.sd <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
y.period.sd.ife <- apply(as.matrix(Y[1:20, 1:50]), 1, sd)
sim.y.tr.sd[i, j] <- y.tr.sd
sim.y.sd[i, j] <- y.sd
sim.res.tr.sd[i, j] <- res.tr.sd
sim.res.sd[i, j] <- res.sd
sim.y.period.sd[,i,j] <- c(y.period.sd)
sim.y.tr.sd.ife[i, j] <- y.tr.sd.ife
sim.y.sd.ife[i, j] <- y.sd.ife
sim.res.tr.sd.ife[i, j] <- res.tr.sd.ife
sim.res.sd.ife[i, j] <- res.sd.ife
sim.y.period.sd.ife[,i,j] <- c(y.period.sd.ife)
sim.thres[i, j] <- quantile(res.sd.periods, 0.5)
## estimated att
sim.att.avg[i, j] <- out_fect$att.avg
sim.att.avg.ife[i, j] <- out_ife$att.avg
## store results relevant to F test
#sim.Ftest[i, j] <- fitness_fect$Ftest[4]
}
mean.sim.est.att.ci <- mean.sim.est.att.ci.ife <- matrix(NA, 89, 11)
for (j in 1:11) {
mean.sim.est.att.ci[i,j] <- max(abs(sim.est.att.ci[,,i,j]))
mean.sim.est.att.ci.ife[i,j] <- max(abs(sim.est.att.ci.ife[,,i,j]))
}
mean.sim.est.att.ci[1,]
mean.sim.est.att.ci.ife[1,]
sim.y.sd[1, ]
sim.y.sd[1, ] * 0.36
sim.res.sd[1, ] * 0.36
sim.thres[1, ] * 0.36
plot(mean.sim.est.att.ci.ife[1,])
points(sim.thres[1, ] * 0.36)
plot(mean.sim.est.att.ci.ife[1,], type = ";")
plot(mean.sim.est.att.ci.ife[1,], type = "l")
points(sim.thres[1, ] * 0.36)
rm(list=ls())
#Variables which govern the size of the simulation (and our causal effects)
nstudent <- 200
Eff <- 10
EffSD <- 10 #treatment effect heterogeneity#
# Simulate data
Yr1Score <- rnorm(nstudent, 70, 5)
demeaned_Yr1Score <- Yr1Score - mean(Yr1Score)
CtlOutcome <- rnorm(nstudent, log(Yr1Score) * 18, 3)
# CtlOutcome <- rnorm(nstudent, log(Yr1Score) * 18 * (Yr1Score < 76) + Yr1Score * (Yr1Score >= 76), 3)
# plot(log(Yr1Score) * 18 * (Yr1Score < 76) + exp(-Yr1Score / 100) * 160 * (Yr1Score >= 76) ~ Yr1Score)
TrOutcome <- CtlOutcome + rnorm(nstudent, Eff, EffSD)
RealATE <- mean(TrOutcome - CtlOutcome)
# Fixed margins randomization
Trt  <- rep(0, nstudent)
Trt[sample(c(1:length(Trt)), length(Trt)/2)] <- 1
Yr2Obs <- CtlOutcome * (1 - Trt) + Trt * TrOutcome
require(geosphere)
?distGeo
distGeo(c(3,5), c(4,5))
distGeo()
distGeo
?optimise
?optimize
?distGeo
distGeo(c(3,5), c(4,5))[1]
distGeo(c(3,5), c(4,5))[2]
typeof(distGeo(c(3,5), c(4,5)))
typeof(distGeo(c(3,5), c(4,5))[1])
?SpatialEffect
require(SpatialEffect)
?SpatialEffect
setwd(/Users/yewang/Documents/GitHub/spatial/package/SpatialEffect)
setwd("/Users/yewang/Documents/GitHub/spatial/package/SpatialEffect")
compileAttributes(verbose=TRUE)
require(Rcpp)
compileAttributes(verbose=TRUE)
require(SpatialEffect)
require(SpatialEffect)
