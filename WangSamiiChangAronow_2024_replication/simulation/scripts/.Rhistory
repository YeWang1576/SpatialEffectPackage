as.character(c(-8:1)),
rep(rep(NA, 10), 5)
)
df_sa$Treatment <- ifelse(df_sa$Value > 0, "Under Treatment", "Under Control")
p_sa <- ggplot(df_sa, aes(x = Time, y = Unit, fill = Treatment)) +
xlab("Time") + ylab("Unit") +
geom_tile(color = "white", size = 0.5) +  # Create the tile grid
scale_fill_manual(values = c("Under Control" = "#B0C4DE", "Under Treatment" = "#06266F", "No Data" = "grey90")) +  # Adjust colors
geom_text(aes(label = Text), color = "white", parse = TRUE, size = 6, na.rm = TRUE) +  # Add text labels inside the cells
scale_x_continuous(breaks = 1:10,  # Specify the positions
labels = c(1:10)) +  # Ensure time is from 1 to 10  labs(x = "Time", y = "Unit", fill = "") +  # Axis and legend labels
theme_minimal() +  # Clean theme
theme(
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
legend.position = "bottom",  # Legend at the bottom
legend.title = element_blank(),
legend.text = element_text(size = 20),  # Legend text font size
panel.grid = element_blank(),  # Remove background gridlines
panel.background = element_rect(fill = "grey95", color = NA)  # Light grey background for the plot area
)
ggsave(p_sa, file = "graphs/sa.pdf", height = 8, width = 8)
Units <- c(1:10)
df_reverse <- expand.grid("Time" = 1:10, "Unit" = factor(Units, levels = rev(Units)))
df_reverse$Value <- c(c(1, 1, 0, 0, 0, 1, 1, 1, 0, 0),
c(0, 1, 1, 0, 0, 1, 1, 0, 0, 0),
c(0, 0, 1, 1, 1, 0, 0, 0, 0, 1),
c(0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
rep(rep(0, 10), 5))
df_reverse$Text <- c(
c(NA, NA, "-2", "-1", "0", "1", "2", "3", NA, NA),
c("0", "1", "2", "-1", "0", "1", "2", NA, NA, NA),
c("-1", "0", "1", "2", "3", "-3", "-2", "-1", "0", "1"),
c("-3", "-2", "-1", "0", "1", "2", "-1", "0", "1", "2"),
c("-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4"),
rep(rep(NA, 10), 5)
)
df_reverse$Treatment <- ifelse(df_reverse$Value > 0, "Under Treatment", "Under Control")
p_rev <- ggplot(df_reverse, aes(x = Time, y = Unit, fill = Treatment)) +
xlab("Time") + ylab("Unit") +
geom_tile(color = "white", size = 0.5) +  # Create the tile grid
scale_fill_manual(values = c("Under Control" = "#B0C4DE", "Under Treatment" = "#06266F", "No Data" = "grey90")) +  # Adjust colors
geom_text(aes(label = Text), color = "white", parse = TRUE, size = 6, na.rm = TRUE) +  # Add text labels inside the cells
scale_x_continuous(breaks = 1:10,  # Specify the positions
labels = c(1:10)) +  # Ensure time is from 1 to 10  labs(x = "Time", y = "Unit", fill = "") +  # Axis and legend labels
theme_minimal() +  # Clean theme
theme(
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
legend.position = "bottom",  # Legend at the bottom
legend.title = element_blank(),
legend.text = element_text(size = 20),  # Legend text font size
panel.grid = element_blank(),  # Remove background gridlines
panel.background = element_rect(fill = "grey95", color = NA)  # Light grey background for the plot area
)
ggsave(p_rev, file = "graphs/rev.pdf", height = 8, width = 8)
rm(list=ls())
## source("~/Dropbox/CurrentProjects/TSCS_sensitivity/code/ye/synth_sampling_new.R")
# source("~/Dropbox/CurrentProjects/TSCS_sensitivity/code/ye/placebo_forpaper.R")
setwd("/Users/yewang/Dropbox/CurrentProjects/CIP_design/data/Acemoglu_etal_2018")
## setwd("~/Dropbox/ProjectZ/TSCS_placebo/replication/Tomz_etal_2007")
## source("~/Dropbox/ProjectZ/TSCS_placebo/code/yiqing/synth_sampling_new.R")
## source("~/Dropbox/ProjectZ/TSCS_placebo/code/yiqing/placebo3.R")
## source("/Users/yewang/Dropbox/CurrentProjects/TSCS_sensitivity/code/ye/equi_test.R")
require(foreign)
require(readstata13)
require(fect)
library(grid)
library(gridExtra)
library(ggplot2)
library(tjbal)
library(panelView)
o.data <- read.dta13("DDCGdata_final.dta")
dim <- nrow(o.data)
dim(o.data)
o.data$y <- exp(o.data$y / 100)
Y <- "y"
D <- "dem"
#X <- "l1_Y"
unit <- "wbcode2"
period <- "year"
FE <- c(unit, period)
cl <- unit
d <- o.data[complete.cases(o.data[,c(Y, D, FE)]), c(Y, D, FE)]
library(dplyr)
d <- d %>%
group_by(wbcode2) %>%
mutate(l1_Y = lag(y), l1_D = lag(dem)) %>%
mutate(l2_Y = lag(l1_Y), l2_D = lag(l1_D)) %>%
mutate(l3_Y = lag(l2_Y), l3_D = lag(l2_D)) %>%
mutate(l4_Y = lag(l3_Y), l4_D = lag(l3_D)) %>%
mutate(l5_Y = lag(l4_Y), l5_D = lag(l4_D)) %>%
mutate(l6_Y = lag(l5_Y), l6_D = lag(l5_D)) %>%
mutate(l7_Y = lag(l6_Y), l7_D = lag(l6_D)) %>%
mutate(l8_Y = lag(l7_Y), l8_D = lag(l7_D)) %>%
mutate(l9_Y = lag(l8_Y), l9_D = lag(l8_D)) %>%
mutate(l10_Y = lag(l9_Y), l10_D = lag(l9_D))
d <- as.data.frame(d)
cumDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d, function(x) all(x == cummax(x)))
cumDem_list <- cumDem[cumDem[, 2] == TRUE, 1]
d1 <- d[d[, unit] %in% cumDem_list, ]
d1 <- d1[d1[, period] >= 1970 & d1[, period] < 2010, ]
comDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d1, function(x) length(x) == 40)
comDem_list <- comDem[comDem[, 2] == TRUE, 1]
d1 <- d1[d1[, unit] %in% comDem_list, ]
transDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d1, function(x) sum(x) == 40)
transDem_list <- transDem[transDem[, 2] == FALSE, 1]
d1 <- d1[d1[, unit] %in% transDem_list, ]
firstDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d1, function(x) min(which(x == 1)))
View(d)
FEct.formula <- paste0(Y, "~", D)
ylimit <- c(-50, 50)
elimit <- c(-0.4, 0.4)
out_fect1 <- fect(formula = as.formula(FEct.formula), data = d1, method = "ife",
index=FE, tol = 1e-5, se = FALSE, nboots = 200, r = 1,
CV = FALSE, force = "two-way", parallel = 1, cores = 4)
alpha_dat1 <- data.frame(id = out_fect1$id, alpha = out_fect1$alpha, lambda = out_fect1$lambda)
xi_dat1 <- data.frame(period = unique(d1[, period]), xi = out_fect1$xi, factor = out_fect1$factor)
d2 <- d[d[, period] >= 1970 & d[, period] < 2010, ]
comDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d2, function(x) length(x) == 40)
comDem_list <- comDem[comDem[, 2] == TRUE, 1]
d2 <- d2[d2[, unit] %in% comDem_list, ]
transDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d2, function(x) sum(x) == 40)
transDem_list <- transDem[transDem[, 2] == FALSE, 1]
d2 <- d2[d2[, unit] %in% transDem_list, ]
d2$reverse <- d2$l1_D > d2$dem | d2$l2_D > d2$dem | d2$l3_D > d2$dem | d2$l4_D > d2$dem | d2$l5_D > d2$dem
out_fect2 <- fect(formula = as.formula(FEct.formula), data = d2, method = "ife",
index=FE, tol = 1e-5, se = FALSE, nboots = 200, r = 1,
CV = FALSE, force = "two-way", parallel = 1, cores = 4)
plot(out_fect2, type="gap", count = TRUE)
plot(out_fect2, type="exit", count = TRUE)
avg_reverse <- aggregate(reverse ~ year, d2, function(x) sum(x, na.rm = TRUE))
alpha_dat2 <- data.frame(id = out_fect2$id, alpha = out_fect2$alpha, lambda = out_fect2$lambda)
xi_dat2 <- data.frame(period = unique(d2[, period]), xi = out_fect2$xi,
f = out_fect2$factor, avg_reverse = avg_reverse[, 2])
xi_dat1$avg_reverse <- avg_reverse[, 2]
smooth_colors <- colorRampPalette(c("grey", "black"))
color_vector <- smooth_colors(length(unique(avg_reverse$reverse)))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"), xlab = expression(xi[t] ~ " without reversal"),
col = color_vector[avg_reverse$reverse], lwd = 1)
abline(a = 0, b = 1, lty = 3)
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"), xlab = expression(xi[t] ~ " without reversal"),
col = color_vector[avg_reverse$reverse], lwd = 1.2)
abline(a = 0, b = 1, lty = 3)
smooth_colors <- colorRampPalette(c("#CECECE", "#000000"))
color_vector <- smooth_colors(length(unique(avg_reverse$reverse)))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"), xlab = expression(xi[t] ~ " without reversal"),
col = color_vector[avg_reverse$reverse], lwd = 1.2)
abline(a = 0, b = 1, lty = 3)
smooth_colors <- colorRampPalette(c("#E5E5E5", "#000000"))
color_vector <- smooth_colors(length(unique(avg_reverse$reverse)))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"), xlab = expression(xi[t] ~ " without reversal"),
col = color_vector[avg_reverse$reverse], lwd = 1.2)
abline(a = 0, b = 1, lty = 3)
smooth_colors <- colorRampPalette(c("#E5E5E5", "#000000"))
color_vector <- smooth_colors(length(unique(avg_reverse$reverse)))
smooth_colors <- colorRampPalette(c("white", "#000000"))
color_vector <- smooth_colors(length(unique(avg_reverse$reverse)))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"), xlab = expression(xi[t] ~ " without reversal"),
col = color_vector[avg_reverse$reverse], lwd = 1.2)
abline(a = 0, b = 1, lty = 3)
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_alpha_ests.pdf", height = 6, width = 6)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "alpha"] ~ alpha_dat1$alpha,
pch = 1, ylab = expression(alpha[i] ~ " with reversal"),
xlab = expression(alpha[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3, lwd = 2)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_lambda_ests.pdf", height = 6, width = 6)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "lambda"] ~ alpha_dat1$lambda,
pch = 1, ylab = expression(lambda[i] ~ " with reversal"),
xlab = expression(lambda[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3)
dev.off()
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(lambda[i] ~ " with reversal"),
xlab = expression(lambda[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_xi_ests.pdf", height = 6, width = 6)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"),
xlab = expression(xi[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_f_ests.pdf", height = 6, width = 6)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$f ~ xi_dat1$f,
pch = 1, ylab = expression(f[t] ~ " with reversal"),
xlab = expression(f[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_alpha_ests.pdf", height = 5, width = 5)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "alpha"] ~ alpha_dat1$alpha,
pch = 1, ylab = expression(alpha[i] ~ " with reversal"),
xlab = expression(alpha[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3, lwd = 2)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_lambda_ests.pdf", height = 5, width = 5)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "lambda"] ~ alpha_dat1$lambda,
pch = 1, ylab = expression(lambda[i] ~ " with reversal"),
xlab = expression(lambda[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_xi_ests.pdf", height = 5, width = 5)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"),
xlab = expression(xi[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_f_ests.pdf", height = 5, width = 5)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$f ~ xi_dat1$f,
pch = 1, ylab = expression(f[t] ~ " with reversal"),
xlab = expression(f[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_alpha_ests.pdf", height = 4, width = 4)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "alpha"] ~ alpha_dat1$alpha,
pch = 1, ylab = expression(alpha[i] ~ " with reversal"),
xlab = expression(alpha[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3, lwd = 2)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_lambda_ests.pdf", height = 4, width = 4)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat2[alpha_dat2$id %in% alpha_dat1$id, "lambda"] ~ alpha_dat1$lambda,
pch = 1, ylab = expression(lambda[i] ~ " with reversal"),
xlab = expression(lambda[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_xi_ests.pdf", height = 4, width = 4)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$xi ~ xi_dat1$xi,
pch = 1, ylab = expression(xi[t] ~ " with reversal"),
xlab = expression(xi[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_f_ests.pdf", height = 4, width = 4)
par(mar = c(4, 5, 4, 4))
plot(xi_dat2$f ~ xi_dat1$f,
pch = 1, ylab = expression(f[t] ~ " with reversal"),
xlab = expression(f[t] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2,
col = color_vector[avg_reverse$reverse])
abline(a = 0, b = 1, lty = 3)
dev.off()
out_fect2_carryover <- fect(formula = as.formula(FEct.formula), data = d2, method = "ife",
index=FE, tol = 1e-5, se = FALSE, nboots = 200, r = 1,
CV = FALSE, force = "two-way", parallel = 0, cores = 4,
carryoverTest = TRUE,
carryover.period = c(1, 20))
revDem <- aggregate(as.formula(paste0(D, "~", unit)), data = d2, function(x) min(which((x - cummax(x)) < 0)))
revDem[revDem$dem == Inf, 2] <- 40
names(revDem)[2] <- "first_rev"
d3 <- d2
d3 <- merge(d3, revDem, by = "wbcode2")
d3 <- d3[d3[, period] < (d3[, "first_rev"] + 1969), ]
panelview(as.formula(paste0(Y, "~", D)), index = FE, data = d3, "raw")
out_fect3 <- fect(formula = as.formula(FEct.formula), data = d3, method = "ife",
index=FE, tol = 1e-5, se = FALSE, nboots = 200, r = 1,
CV = FALSE, force = "two-way", parallel = 1, cores = 4)
avg_reverse <- aggregate(reverse ~ year, d3, function(x) sum(x, na.rm = TRUE))
alpha_dat3 <- data.frame(id = out_fect3$id, alpha = out_fect3$alpha, lambda = out_fect3$lambda)
xi_dat3 <- data.frame(period = unique(d3[, period]), xi = out_fect3$xi,
f = out_fect3$factor, avg_reverse = avg_reverse[, 2])
xi_dat3$avg_reverse <- avg_reverse[, 2]
pdf("/Users/yewang/Dropbox/CurrentProjects/CIP_design/graphs/application/DD_alpha_ests_rm.pdf", height = 4, width = 4)
par(mar = c(4, 5, 4, 4))
plot(alpha_dat3$alpha ~ alpha_dat2$alpha,
pch = 1, ylab = expression(alpha[i] ~ " with reversal"),
xlab = expression(alpha[i] ~ " without reversal"), lwd = 1.2, cex.lab = 1.2,
cex.axis = 1.2, cex = 1.2)
avg_reverse <- aggregate(reverse ~ year, d3, function(x) sum(x, na.rm = TRUE))
alpha_dat3 <- data.frame(id = out_fect3$id, alpha = out_fect3$alpha, lambda = out_fect3$lambda)
xi_dat3 <- data.frame(period = unique(d3[, period]), xi = out_fect3$xi,
f = out_fect3$factor, avg_reverse = avg_reverse[, 2])
xi_dat3$avg_reverse <- avg_reverse[, 2]
rm(list=ls())
##############################################################################
###################Import Libraries###########################################
##############################################################################
library(foreign)
library(sp)
library(fields)
library(raster)
library(sf)
library(Rcpp)
library(RcppArmadillo)
library(pbapply)
#set.seed(2024)
set.seed(2025)
##############################################################################
###################Set Root Directory#########################################
##############################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path="../simulation/data_new/"
##############################################################################
#################Number of Simulations #######################################
##############################################################################
nsim=2000
##############################################################################
################Import Functions##############################################
##############################################################################
sourceCpp("../../SpatialEffect/src/DistanceCalculation2.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/calculate_tau.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/calculate_tau_separate.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/effect_nonmo.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/effect_interactive.cpp",verbose=0)
source("../simulation/scripts/5_functions_generate_simulation_data.R")
getwd
getwd()
source("5_functions_generate_simulation_data.R")
source("6_functions.R")
rm(list=ls())
library(Rcpp)
library(Matrix)
library(RcppArmadillo)
library(plotrix)
library(foreign)
library(sp)
library(fields) #for kriging
library(ri)
library(sf)
library(raster) #used to create rasters for simulations
library(units) #used to transform some data objects to standard matriices
library(ggplot2) #ggplots
library(data.table) #for resahpe data for ploting
##############################################################################
##################If ri package is not installed##############################
##############################################################################
# #ri package no longer available from repository
# install.packages('./simulation/ri_0.9.tar.gz',type='source')
##############################################################################
##################Set Root Directories########################################
##############################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path="../simulation/data_new/"
##############################################################################
##################Import Functions############################################
##############################################################################
sourceCpp("../../SpatialEffect/src/DistanceCalculation.cpp")
sourceCpp("../../SpatialEffect/src/ConleySE_kernel_matrix.cpp")
sourceCpp("../../SpatialEffect/src/Conley2.cpp")
source("5_functions_run_simulations.R")
source("6_functions.R")
source("6_functions2.R")
source("6_functions3.R")
##############################################################################
#################Today's Date#################################################
##############################################################################
today_date=format(Sys.Date(), format="%b_%d")
##############################################################################
##################Simulation##################################################
##############################################################################
##############################################################################
##################Point Intervention (Pair)###################################
##############################################################################
# simulation with non-monotonic effect function and YZratio=10
start.time=proc.time()
sim1_raw_data_file = "../data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
save(simulation_result, file = paste0(data_path,"Paired_simulation_", TYPE, "_" ,YZratio,'_',today_date,"_points.RData"))
print(proc.time()-start.time)
start.time=proc.time()
sim1_raw_data_file = "simulation/data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
save(simulation_result, file = paste0(data_path,"Paired_simulation_", TYPE, "_" ,YZratio,'_',today_date,"_points.RData"))
print(proc.time()-start.time)
start.time=proc.time()
sim1_raw_data_file = "simulation/data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
save(simulation_result, file = paste0(data_path,"Paired_simulation_", TYPE, "_" ,YZratio,'_',today_date,"_points.RData"))
print(proc.time()-start.time)
start.time=proc.time()
sim1_raw_data_file = "simulation/data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
save(simulation_result, file = paste0(data_path,"Paired_simulation_", TYPE, "_" ,YZratio,'_',today_date,"_points.RData"))
print(proc.time()-start.time)
start.time=proc.time()
sim1_raw_data_file = "../data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
save(simulation_result, file = paste0(data_path,"Paired_simulation_", TYPE, "_" ,YZratio,'_',today_date,"_points.RData"))
print(proc.time()-start.time)
View(run_simulation)
sim1_raw_data_file = "../data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
sim1_raw_data_file = "../data_new/Paired_simData_nonmono_10_Jun_06_points.RData"
TYPE='nonmono'
YZratio=10
sample_sizes <-c(80, 100, 120)
dVec <- seq(from=.5, to=10, by=.25)
bw <- 1
cutoff = 2*6
simulation_result=run_simulation(sim1_raw_data_file,cutoff,bw,sample_sizes,polygon=0)
rm(list=ls())
rm(list=ls())
##############################################################################
###################Import Libraries###########################################
##############################################################################
library(foreign)
library(sp)
library(fields)
library(raster)
library(sf)
library(Rcpp)
library(RcppArmadillo)
library(pbapply)
#set.seed(2024)
set.seed(2025)
##############################################################################
###################Set Root Directory#########################################
##############################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path="../simulation/data_new/"
##############################################################################
#################Number of Simulations #######################################
##############################################################################
nsim=2000
##############################################################################
################Import Functions##############################################
##############################################################################
sourceCpp("../../SpatialEffect/src/DistanceCalculation2.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/calculate_tau.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/calculate_tau_separate.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/effect_nonmo.cpp",verbose=0)
sourceCpp("../../SpatialEffect/src/effect_interactive.cpp",verbose=0)
source("5_functions_generate_simulation_data.R")
source("6_functions.R")
##############################################################################
#################Today's Date#################################################
##############################################################################
today_date=format(Sys.Date(), format="%b_%d")
##############################################################################
#################Simulation: Polygon Interventions (paired) ##################
##############################################################################
start.time=proc.time()
# nonmono effect + YZratio = 10 + paired polygon
# On my laptop it took 2397.17 seconds
TYPE <- "nonmono"
sample_sizes <- c(80, 100, 120)
YZratio=10
data_list=lapply(sample_sizes,dataGenerator, type=TYPE,nsim=nsim,tr_prob=0.5,YZratio=YZratio, unit_size=1,  cr=FALSE, pair=TRUE,polygon=1, trim_ras=1, effect=3, Y_sd=1, Zjitter=1)
